version: 2
models:
- name: pharmacy__brand_generic_opportunity
  config:
    schema: |
      {%- if var('tuva_schema_prefix', None) != None -%}
        {{var('tuva_schema_prefix')}}_pharmacy
      {% else %}
        pharmacy
      {%- endif -%}
    alias: brand_generic_opportunity
    tags:
    - pharmacy
    materialized: table
  description: >
    Table that identifies opportunities for generic substitution in pharmacy claims.
  tests:
  - dbt_utils.unique_combination_of_columns:
  - name: test
    description: test
      combination_of_columns:
  - name: test
    description: test
      - data_source
      - claim_id
      - claim_line_number
  columns:
  - name: test
    description: test
  - name: data_source
    description: Source of the data.
  - name: claim_id
    description: Unique identifier for the claim.
  - name: claim_line_number
    description: Line number of the claim.
  - name: ndc_code
    description: National Drug Code.
  - name: ndc_description
    description: Description of the drug as per NDC.
  - name: brand_rxcui
    description: RxNorm Concept Unique Identifier for the brand.
  - name: brand_vs_generic
    description: Indicates whether the drug is a brand or generic.
  - name: generic_available
    description: Indicates if a generic version is available.
  - name: paid_amount
    description: Amount paid for the drug.
  - name: total_units
    description: Total units of the drug dispensed.
  - name: brand_cost_per_unit
    description: Cost per unit for the branded drug.
  - name: generic_average_cost_per_unit
    description: Average cost per unit of the generic drug.
  - name: brand_less_generic_cost_per_unit
    description: Difference between the cost per unit of the brand and the average
      cost per unit of the generic drug.
  - name: generic_available_total_opportunity
    description: Total potential savings from substituting with generics, where applicable,
      based on units multiplied by cost difference per unit.
  - name: tuva_last_run
    description: >
      The last time the data was refreshed.  Generated by  `dbt_utils.pretty_time`
      as the local time of the `dbt run`  environment.  Timezone is configurable via
      the `tuva_last_run` var.

